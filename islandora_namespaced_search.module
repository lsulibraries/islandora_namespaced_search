<?php
// This entire .module is ripped from islandora_collection_search.

// TODO: put this search in a block or sth that can be added to appropriate pages.
// How blocks work...

// TODO: checkboxes or multiselect UI control in the form.

// TODO: Figure out how to get a discreet list of namespaces (ideally without having to create a list in the db) (admin settings).
// ##DONE see get_all_collections_inst function below
// ##ADDED lsu => lsu* and all => '*' type stuff

// TODO: (later) figure out how to cache the results of the above search ^

// Module currently exists in advanced search block...

function islandora_namespaced_search_islandora_solr_query($islandora_solr_query) {
  // Query param 'ns' gets set on form submission so that we can use it here.
  if(!isset($_GET['ns'])){
    return;
  }
  $namespaces = $_GET['ns'];
  $filtered_ns = array_values(array_filter($namespaces));

  if (count($filtered_ns) > 1) {
    $ns_filters = array();
    foreach ($filtered_ns as $ns) {
      $ns_filters[] = "PID:$ns";
    }

    $filter = implode(' OR ', $ns_filters);
  } else {
    $filter = format_string('!field:!value', array(
      '!field' => 'PID',
      '!value' => array_shift($filtered_ns),
    ));
  }
  $islandora_solr_query->solrParams['fq'][] = $filter;
}

function islandora_namespaced_search_form_islandora_solr_advanced_search_form_alter(&$form, &$form_state) {
  $ns_array = get_all_collections_inst();
  $pruned_ns = array();
  foreach($ns_array as $key => $value){
    $pruned_ns[$key] = $value;
  }
  $form['namespaces'] = array(
    '#title' => 'Search within institutions',
    '#type' => 'checkboxes',
    '#options' => array_flip($pruned_ns), //array_flip(get_all_collections_inst()), //unserialize(file_get_contents('cache_file')),
    '#weight' => 5,
  );
  $form['controls']['#weight'] = 6;
  // Gives us a chance to add 'ns' to the URL for use in altering the query (above).
  $form['#submit'][] = 'islandora_namespaced_search_append_ns';
}




function islandora_namespaced_search_append_ns($form, &$form_state) {

  // Set the 'ns' query param to be fetched later from $_GET.
  $ns_selected = array_filter($form_state['values']['namespaces']);

  if (count($ns_selected) > 0) {
    $form_state['redirect'][1]['query']['ns'] = $ns_selected;
  }
}


function get_all_collections_inst(){
  $connection = islandora_get_tuque_connection();
  if ($connection) {
    $query = <<<EOQ
  SELECT ?pid FROM <#ri>
  WHERE { 
    ?pid <fedora-rels-ext:isMemberOfCollection> <info:fedora/islandora:root>
  }
EOQ;
 $results = $connection->repository->ri->sparqlQuery($query);
  }
  $objects = array();
 foreach($results as $key => $value){
   $plode = explode('-', $results[$key]['pid']['value']);
   $objects[$plode[0]] =  $plode[0] . '*';
 }
 //$objects['all'] = '*';
 return array_unique($objects);
}

/**
 * Implements hook_block_info().
 */
function islandora_namespaced_search_block_info() {
  $blocks['islandora_namespaced_search'] = array(
    'info' => t('Islandora Namespaced Search'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function islandora_namespaced_search_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'islandora_namespaced_search':
      module_load_include('inc', 'islandora_namespaced_search', 'includes/search.form');
      $block['subject'] = t('Search this institution');
      $block['content'] = drupal_get_form('islandora_namespaced_search_form');
      break;
  }
  return $block;
}  
  

function islandora_namespaced_search_form_alter(&$form, &$form_state, $form_id){
    
    if($form_id != 'islandora_basic_collection_create_child_collection_form'){       
        return;
    }
  $user = user_uid_optional_load();
  $user_namespace = $user->field_namespace;  
  //if user has no namespace restrictons
    if(empty($user_namespace)){
    $input_choice = 'textfield';
    $options_or_default = '#default_value';
    $default_namespace = 'islandora';
    $inst_ns_description = "You have no namespace associated with your user account. Please provide an institutional prefix that matches this collection's owner";
    $user_namespace_options = $default_namespace;
  }
  //otherwise the user has one or more namespaces
  else{
    if(count($user_namespace['und']) >= 1){
      $input_choice = 'select';
      $options_or_default = '#options';
      $inst_ns_description = "choose an institutional prefix for the namespace of this collection.";
      $user_namespace_options = array();
      foreach($user_namespace['und'] as $key => $value ){
        $user_namespace_options[$value['value']] = $value['value'];
      }
    }
  }
  $form['pid']['#access'] = FALSE;
  $form['pid']['#element_validate'][] = 'collection_dammit'; 
  $form['institution-prefix'] = array(
      '#type' => $input_choice,
      '#title' => t('Collection PID Prefix (Unique to Institution)'),
      '#description' => t($inst_ns_description),
      $options_or_default => $user_namespace_options,
    );
  $form['collection-alias']  = array(
      '#type' => 'textfield',
      '#description' => t("Enter a Collection alias, as part of this collection's PID"),
      '#title' => t('Collection Alias (Unique to collection)'),  
    );
$form['#validate'][] = 'collection_dammit';
$form_state['validate_handlers'][] = 'collection_dammit';
}
function collection_dammit($form, &$form_state){
     $form_state['values']['pid'] = $form_state['values']['institution-prefix'] . '-' . $form_state['values']['collection-alias'] . ':collection';
}
